notes n todo (yea maybe i'll adapt to the github issues way of doing things... eventually)
-------------


todo:

- see if mat_monitor_gamma affects win10 fullscreen+optimizations/dot color, and if so enforce value

- sv_cheats needs to be on while reverting

slightly less important:

- test mouse_event + A_Cursor for latency vs real mouse

- turn dot white somehow in case that allows us to compile with hdr (hdr bleeds color and screws up pixel color detection). may need to use ambiguous string comparison for less precise color detection eg. 0xE0* vs 0xE07E08

- do fileexist for all configs before running them in cvarreversion / delete reversion file after exec so no accidental 2nd run revert with a bad file



maybe later:


- dynamically record and replay a demo of the scene and get timedemo fps (don't record while latency testing)

- before spreadsheet creation, see if user has mods in /custom. consider grabbing video cvars

- consider giving the option to enable faster system timer during test. test latencies and performance with it on

- update readme about how to access win10 power options

- actually consider making a script to force kill dwm.....

- maybe present options to automate the switching of windows performance options, generally find ways to make everything easier for users

- create 'realtime, real-gameplay' latency monitor. make it aware every time the mouse moves but color doesn't change ie. 1-color unlit surfaces. maybe run 2 pixelgetcolors in different spots on the screen before and after mousegetpos detects movement, then compare the pixelgetcolor before/after and if it is the same, don't count that sample and retry it

- also consider making another script to measure game freezes. x freezes per hour or whatever, n large freezes, z tiny freezes, etc


--------


HAMMER NOTES:

fixed but might as well include: if player spawns are screwed up / scouts want to fall through the floor or spawn inside walls, set their floor to the 'invisible' tool texture and make a new floor below that non-solid with func_brush. you can make the 'invisible' floor not cast/recieve shadows with func_brush as well, but keep it solid ofc. only make these 2 floors func_brush and all others func_detail, since func_brush has more engine overhead and doesn't always act as a traditional brush (eg. stickies bounce off)

---

map compile instructions:
note: i am not currently compiling with hdr because it breaks the script's pixelgetcolor detection. most of these steps are still relevant:
compile map using either Full or Final +HDR (i'm using Batch Compile Tool with VVIS & VRAD on low priority)
if you're going to rename the map, do it before compiling
once done, build cubemaps:
load game with high settings
before map load, mat_specular 0 for first cubemap build, mat_specular 1 if doing second build (if map has large reflective surfaces facing each other, must restart game beforehand)
mat_hdr_level 0 & mat_hdr_level 2 - for LDR & HDR - can switch while on map
load map and do sv_cheats 1 after join
restart game for cubemaps to show

note: even though hightower is HDR, its skybox "sky_badlands_01" is NOT HDR. i've switched to "sky_gravel_01"
NOTE EXTRA::::: i think they did something to make it work IDK, i turned it back to badlands.
it told me when i tried building cubemaps that the skybox resolution or properties werent right or something so it couldn't 'build it for sky_gravel_01' or whatver just rebuild the damn map i'm dying


--------


google sheets info for myself:

THIS IS THE ONLY WAY TO COPY PROPERLY: to copy values, ensure all cells in source sheet have number format "plain text". then select whole row here and ctrl+c and ctrl+v into new sheet that ALSO has number formatting "plain text". after pasting, click the paste icon next to the cells and use "values only"


--------


pixelgetcolor/gdip & windows 10 notes:


find pixelgetcolor & gdip effective rates (method is now included in /tools): create a room in tf2 lined with dense color spectrum thingies and have the player do +right. then measure how many times a second pixelgetcolor/gdip detects a change in color

so, win10 pixelgetcolor is 30KHz but ONLY when no window is focused (click the taskbar). engine_no_focus_sleep 0 allows tf2 to run fine without focus

results: win7 pixelgetcolor reports 1000-1029fps when fps is uncapped. let's see about win10 when taskbar is focused... k well taskbar won't let me get pixelcolor more than 30fps on any coordinate other than itself. even though taskbar is translucent, pixelgetcolor/gdip don't see that. even tried tf2's live thumbnail preview, but seems that that caps out at 30fps. windows cannot overlap taskbar in win10.

fullscreen optimizations allows us to use pixelgetcolor and gdip in fullscreen, but still at a max of 60fps. gdip does not work any faster than pixelgetcolor in win10, max of 60fps

so even at 60fps, readings really aren't that bad tbh. i think up to an additonal 30% of the ms result sounds bad, but doesn't look too bad and is still workable. you could make valid conclusions from that data about your game's performance. 11ms -> 17ms, not so bad. 50ms -> 64ms, not so bad. same ballpark.
